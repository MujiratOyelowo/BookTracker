{"mappings":"C,A,S,C,C,C,C,C,C,C,C,C,E,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,A,Y,O,C,C,E,E,C,C,E,C,E,E,K,E,C,E,E,A,a,O,Q,A,Y,O,O,O,E,O,O,C,I,C,Q,S,E,C,C,C,E,G,C,C,C,E,C,C,G,C,C,C,E,C,C,I,E,A,Y,O,C,C,E,E,C,C,E,C,G,C,G,E,O,E,E,C,G,G,E,O,E,E,C,G,G,G,A,U,O,E,O,E,G,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,O,C,S,C,E,I,E,C,C,E,C,E,C,E,C,O,A,M,E,E,C,E,E,K,C,C,E,I,E,C,C,E,C,I,E,M,C,G,C,C,E,C,E,C,I,C,E,O,C,E,E,E,O,C,E,C,O,C,C,E,C,O,C,S,E,C,E,I,E,E,O,C,G,M,A,C,I,E,C,E,E,E,C,C,E,e,C,C,E,E,M,C,S,C,E,I,C,E,C,E,I,C,M,C,E,I,C,O,C,C,C,E,E,O,C,E,E,K,C,E,E,M,C,E,E,Q,C,S,C,C,C,E,C,C,E,C,C,S,C,C,C,E,E,O,C,C,E,C,E,A,E,O,c,C,E,O,C,I,W,O,C,C,E,A,C,G,C,C,E,C,E,I,I,E,E,E,E,M,C,I,E,C,C,E,E,G,E,C,I,E,E,E,A,C,U,O,S,A,a,O,O,O,O,C,E,Y,O,Q,O,G,E,O,W,O,C,E,C,E,C,M,C,S,C,C,C,C,C,C,C,ECCA,eAAe,IAEX,IAAM,EAAW,MAAM,MAAM,iCAAkC,CAAE,OAAQ,MAAO,GAC1E,EAAU,MAAM,EAAS,IAAI,EAGnC,CAAA,EAAQ,SAAS,CAAG,WAAW,IAAI,CAAC,OAAO,IAAI,CAAC,EAAQ,SAAS,EAAG,AAAA,GAAK,EAAE,UAAU,CAAC,IAClF,EAAQ,gBAAgB,EAC1B,CAAA,EAAQ,gBAAgB,CAAG,EAAQ,gBAAgB,CAAC,GAAG,CAAC,AAAA,GAAS,CAAA,CAC/D,GAAG,CAAI,CACP,GAAI,WAAW,IAAI,CAAC,OAAO,IAAI,CAAC,EAAK,EAAE,EAAG,AAAA,GAAK,EAAE,UAAU,CAAC,GAC9D,CAAA,EAAA,EAIF,IAAM,EAAY,MAAM,UAAU,WAAW,CAAC,GAAG,CAAC,CAAE,UAAW,CAAQ,GAGjE,EAAoB,CACxB,GAAI,EAAU,EAAE,CAChB,MAAO,KAAK,OAAO,YAAY,IAAI,IAAI,WAAW,EAAU,KAAK,IACjE,SAAU,CACR,kBAAmB,KAAK,OAAO,YAAY,IAAI,IAAI,WAAW,EAAU,QAAQ,CAAC,iBAAiB,IAClG,eAAgB,KAAK,OAAO,YAAY,IAAI,IAAI,WAAW,EAAU,QAAQ,CAAC,cAAc,IAC5F,UAAW,KAAK,OAAO,YAAY,IAAI,IAAI,WAAW,EAAU,QAAQ,CAAC,SAAS,IAClF,WAAY,EAAU,QAAQ,CAAC,UAAU,CAAG,KAAK,OAAO,YAAY,IAAI,IAAI,WAAW,EAAU,QAAQ,CAAC,UAAU,IAAM,IAC5H,EACA,KAAM,EAAU,IAAI,AACtB,CASI,CANmB,CAAA,MAAM,MAAM,yBAA0B,CAC3D,OAAQ,OACR,QAAS,CAAE,eAAgB,kBAAmB,EAC9C,KAAM,KAAK,SAAS,CAAC,EACvB,EAAA,EAEmB,EAAE,EACnB,MAAM,wCAEN,OAAO,QAAQ,CAAC,IAAI,CAAG,aAEvB,MAAM,mCAEV,CAEA,SAAS,cAAc,CAAC,sBAAsB,gBAAgB,CAAC,QAAS,E,E,C,E,E,C,Q,C,Q","sources":["<anon>","assets/scripts/webauthnLogin.js"],"sourcesContent":["// modules are defined as an array\n// [ module function, map of requires ]\n//\n// map of requires is short require name -> numeric require\n//\n// anything defined in a previous bundle is accessed via the\n// orig method which is the require for previous bundles\n\n(function (modules, entry, mainEntry, parcelRequireName, globalName) {\n  /* eslint-disable no-undef */\n  var globalObject =\n    typeof globalThis !== 'undefined'\n      ? globalThis\n      : typeof self !== 'undefined'\n      ? self\n      : typeof window !== 'undefined'\n      ? window\n      : typeof global !== 'undefined'\n      ? global\n      : {};\n  /* eslint-enable no-undef */\n\n  // Save the require from previous bundle to this closure if any\n  var previousRequire =\n    typeof globalObject[parcelRequireName] === 'function' &&\n    globalObject[parcelRequireName];\n\n  var cache = previousRequire.cache || {};\n  // Do not use `require` to prevent Webpack from trying to bundle this call\n  var nodeRequire =\n    typeof module !== 'undefined' &&\n    typeof module.require === 'function' &&\n    module.require.bind(module);\n\n  function newRequire(name, jumped) {\n    if (!cache[name]) {\n      if (!modules[name]) {\n        // if we cannot find the module within our internal map or\n        // cache jump to the current global require ie. the last bundle\n        // that was added to the page.\n        var currentRequire =\n          typeof globalObject[parcelRequireName] === 'function' &&\n          globalObject[parcelRequireName];\n        if (!jumped && currentRequire) {\n          return currentRequire(name, true);\n        }\n\n        // If there are other bundles on this page the require from the\n        // previous one is saved to 'previousRequire'. Repeat this as\n        // many times as there are bundles until the module is found or\n        // we exhaust the require chain.\n        if (previousRequire) {\n          return previousRequire(name, true);\n        }\n\n        // Try the node require function if it exists.\n        if (nodeRequire && typeof name === 'string') {\n          return nodeRequire(name);\n        }\n\n        var err = new Error(\"Cannot find module '\" + name + \"'\");\n        err.code = 'MODULE_NOT_FOUND';\n        throw err;\n      }\n\n      localRequire.resolve = resolve;\n      localRequire.cache = {};\n\n      var module = (cache[name] = new newRequire.Module(name));\n\n      modules[name][0].call(\n        module.exports,\n        localRequire,\n        module,\n        module.exports,\n        globalObject\n      );\n    }\n\n    return cache[name].exports;\n\n    function localRequire(x) {\n      var res = localRequire.resolve(x);\n      return res === false ? {} : newRequire(res);\n    }\n\n    function resolve(x) {\n      var id = modules[name][1][x];\n      return id != null ? id : x;\n    }\n  }\n\n  function Module(moduleName) {\n    this.id = moduleName;\n    this.bundle = newRequire;\n    this.exports = {};\n  }\n\n  newRequire.isParcelRequire = true;\n  newRequire.Module = Module;\n  newRequire.modules = modules;\n  newRequire.cache = cache;\n  newRequire.parent = previousRequire;\n  newRequire.register = function (id, exports) {\n    modules[id] = [\n      function (require, module) {\n        module.exports = exports;\n      },\n      {},\n    ];\n  };\n\n  Object.defineProperty(newRequire, 'root', {\n    get: function () {\n      return globalObject[parcelRequireName];\n    },\n  });\n\n  globalObject[parcelRequireName] = newRequire;\n\n  for (var i = 0; i < entry.length; i++) {\n    newRequire(entry[i]);\n  }\n\n  if (mainEntry) {\n    // Expose entry point to Node, AMD or browser globals\n    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js\n    var mainExports = newRequire(mainEntry);\n\n    // CommonJS\n    if (typeof exports === 'object' && typeof module !== 'undefined') {\n      module.exports = mainExports;\n\n      // RequireJS\n    } else if (typeof define === 'function' && define.amd) {\n      define(function () {\n        return mainExports;\n      });\n\n      // <script>\n    } else if (globalName) {\n      this[globalName] = mainExports;\n    }\n  }\n})({\"ksSlA\":[function(require,module,exports,__globalThis) {\n// webauthnLogin.js\nasync function authenticate() {\n    // 1. Fetch authentication options from your server endpoint\n    const response = await fetch('/webauthn/authenticate-options', {\n        method: 'POST'\n    });\n    const options = await response.json();\n    // 2. Convert the challenge and allowed credential IDs from base64 to Uint8Array\n    options.challenge = Uint8Array.from(window.atob(options.challenge), (c)=>c.charCodeAt(0));\n    if (options.allowCredentials) options.allowCredentials = options.allowCredentials.map((cred)=>({\n            ...cred,\n            id: Uint8Array.from(window.atob(cred.id), (c)=>c.charCodeAt(0))\n        }));\n    // 3. Request an assertion from the browser\n    const assertion = await navigator.credentials.get({\n        publicKey: options\n    });\n    // 4. Convert the ArrayBuffer properties of the assertion to base64 strings\n    const assertionResponse = {\n        id: assertion.id,\n        rawId: btoa(String.fromCharCode(...new Uint8Array(assertion.rawId))),\n        response: {\n            authenticatorData: btoa(String.fromCharCode(...new Uint8Array(assertion.response.authenticatorData))),\n            clientDataJSON: btoa(String.fromCharCode(...new Uint8Array(assertion.response.clientDataJSON))),\n            signature: btoa(String.fromCharCode(...new Uint8Array(assertion.response.signature))),\n            userHandle: assertion.response.userHandle ? btoa(String.fromCharCode(...new Uint8Array(assertion.response.userHandle))) : null\n        },\n        type: assertion.type\n    };\n    // 5. Send the assertion response to your server for verification\n    const verifyResponse = await fetch('/webauthn/authenticate', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(assertionResponse)\n    });\n    if (verifyResponse.ok) {\n        alert(\"Biometric authentication successful!\");\n        // Redirect to the main app page upon successful authentication\n        window.location.href = \"main.html\";\n    } else alert(\"Biometric authentication failed.\");\n}\ndocument.getElementById(\"loginBiometricsBtn\").addEventListener(\"click\", authenticate);\n\n},{}]},[\"ksSlA\"], \"ksSlA\", \"parcelRequire94c2\")\n\n//# sourceMappingURL=index.4427986d.js.map\n","// webauthnLogin.js\r\nasync function authenticate() {\r\n    // 1. Fetch authentication options from your server endpoint\r\n    const response = await fetch('/webauthn/authenticate-options', { method: 'POST' });\r\n    const options = await response.json();\r\n  \r\n    // 2. Convert the challenge and allowed credential IDs from base64 to Uint8Array\r\n    options.challenge = Uint8Array.from(window.atob(options.challenge), c => c.charCodeAt(0));\r\n    if (options.allowCredentials) {\r\n      options.allowCredentials = options.allowCredentials.map(cred => ({\r\n        ...cred,\r\n        id: Uint8Array.from(window.atob(cred.id), c => c.charCodeAt(0))\r\n      }));\r\n    }\r\n  \r\n    // 3. Request an assertion from the browser\r\n    const assertion = await navigator.credentials.get({ publicKey: options });\r\n  \r\n    // 4. Convert the ArrayBuffer properties of the assertion to base64 strings\r\n    const assertionResponse = {\r\n      id: assertion.id,\r\n      rawId: btoa(String.fromCharCode(...new Uint8Array(assertion.rawId))),\r\n      response: {\r\n        authenticatorData: btoa(String.fromCharCode(...new Uint8Array(assertion.response.authenticatorData))),\r\n        clientDataJSON: btoa(String.fromCharCode(...new Uint8Array(assertion.response.clientDataJSON))),\r\n        signature: btoa(String.fromCharCode(...new Uint8Array(assertion.response.signature))),\r\n        userHandle: assertion.response.userHandle ? btoa(String.fromCharCode(...new Uint8Array(assertion.response.userHandle))) : null\r\n      },\r\n      type: assertion.type,\r\n    };\r\n  \r\n    // 5. Send the assertion response to your server for verification\r\n    const verifyResponse = await fetch('/webauthn/authenticate', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(assertionResponse)\r\n    });\r\n    \r\n    if (verifyResponse.ok) {\r\n      alert(\"Biometric authentication successful!\");\r\n      // Redirect to the main app page upon successful authentication\r\n      window.location.href = \"main.html\";\r\n    } else {\r\n      alert(\"Biometric authentication failed.\");\r\n    }\r\n  }\r\n  \r\n  document.getElementById(\"loginBiometricsBtn\").addEventListener(\"click\", authenticate);\r\n  "],"names":["modules","entry","mainEntry","parcelRequireName","globalName","globalObject","globalThis","self","window","global","previousRequire","cache","nodeRequire","module","require","bind","newRequire","name","jumped","currentRequire","err","Error","code","localRequire","resolve","x","id","Module","call","exports","res","isParcelRequire","moduleName","bundle","parent","register","Object","defineProperty","get","i","length","mainExports","define","amd","__globalThis","authenticate","response","fetch","method","options","json","challenge","Uint8Array","from","atob","c","charCodeAt","allowCredentials","map","cred","assertion","navigator","credentials","publicKey","assertionResponse","rawId","btoa","String","fromCharCode","authenticatorData","clientDataJSON","signature","userHandle","type","verifyResponse","headers","body","JSON","stringify","ok","alert","location","href","document","getElementById","addEventListener"],"version":3,"file":"index.4427986d.js.map"}